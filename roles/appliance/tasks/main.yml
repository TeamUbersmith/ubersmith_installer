---
  # Store the configuration values specified during the deploy for use during
  # future upgrades.
  - name: set up ini_file for future use
    ini_file:
      dest: "{{ ansible_user_dir }}/.ubersmith_installer.ini"
      section: ubersmith_installer
      option: "{{ item.var }}"
      value: "{{ item.val }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0640
    with_items:
      - { var: 'appliance_home', val: "{{ appliance_home }}" }
      - { var: 'app_virtual_host', val: "{{ app_virtual_host }}" }

  # Create the directory structure required for Ubersmith to store configuration data
  # and other related files
  - name: create appliance configuration directories
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0775
    with_items:
       - "{{ appliance_home }}/conf/mysql"
       - "{{ appliance_home }}/conf/cron"
       - "{{ appliance_home }}/conf/php"
       - "{{ appliance_home }}/conf/ssl"
       - "{{ appliance_home }}/logs"
       - "{{ appliance_home }}/logs/appliance"
    tags:
      - mysql_config
      - httpd_config
      - upgrade

  - name: create rsyslog configuration
    copy:
      dest: /etc/rsyslog.d/30-ubersmith.conf
      src: 30-ubersmith.conf
      owner: root
      group: root
      mode: 0644
    ignore_errors: yes
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Add logrotate directives to keep Ubersmith logs compressed and rotated.
  - name: create log rotation configuration
    copy:
      dest: /etc/logrotate.d/ubersmith-logs
      src: ubersmith-logs
    ignore_errors: yes
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Get the system's timezone data for use in Docker Compose files
  - name: readlink /etc/localtime and register timezone_file
    shell: readlink -f /etc/localtime
    register: timezone_file
    tags:
      - compose_override_template
      - upgrade
    when: ansible_os_family != "Darwin"


  # Create the main Docker Compose file, which defines Ubersmith services as containers
  # and includes their configurations. This file may change with every release.
  - name: create docker compose file
    template:
      src: docker-compose.yml.j2
      dest: "{{ appliance_home }}/docker-compose.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    tags:
      - compose_template
      - upgrade

  # Create the override Docker Compose file. This file contains site specific changes and
  # will not be modified by future upgrades.
  - name: create docker compose override file
    template:
      src: docker-compose.override.yml.j2
      dest: "{{ appliance_home }}/docker-compose.override.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    tags:
      - compose_file

  # For existing installs, update to Docker Compose v3
  - name: update docker compose override file
    replace:
      path: "{{ appliance_home }}/docker-compose.override.yml"
      replace: "version: '3'"
      regexp: "version: '2'"
      backup: yes
    tags:
      - upgrade
      - update_compose_override_template

  # Copy over helper scripts 
  - name: copy backup script
    copy:
      src: backup_rrds.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700

  - name: copy appliance_restart
    copy:
      src: appliance_restart.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      force: no
    tags:
      - upgrade
  
  - name: copy appliance_start
    copy:
      src: appliance_start.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      force: no 
    tags:
      - upgrade

  - name: copy appliance_upgrade
    copy:
      src: appliance_upgrade.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      force: no 
    tags:
      - upgrade

  # Create a self signed certificate for temporary use to secure HTTP and SMTP traffic.
  # These files should be replaced with a certificate and key provided by an authorized CA.
  # The 'web' and 'mail' containers need to be restarted if these files are modified.
  - name: create self signed certificates
    command: "openssl req -new -x509 -days 365 -sha256 -newkey rsa:2048 -nodes -keyout {{ app_virtual_host }}.key -out {{ app_virtual_host }}.pem -subj '/O=Ubersmith/OU=Hosting/CN={{ app_virtual_host }}'"
    args:
      chdir: "{{ appliance_home }}/conf/ssl"
      creates: "{{ appliance_home }}/conf/ssl/{{ app_virtual_host }}.pem"
    when: ansible_os_family != "Windows"

  # Retrieve Ubersmith images from the repository.  
  - name: run docker compose pull
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith pull"
    args:
      chdir: "{{ appliance_home }}"
    tags:
      - compose_pull
      - upgrade

  # Only when upgrading, stop and remove existing Ubersmith containers.
  - name: stop existing containers
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith rm -sf"
    args:
      chdir:  "{{ appliance_home }}"
    tags:
      - upgrade_only

  # Only when upgrading, get the list of docker volumes, so the webroot
  # can be replaced by the new version of Ubersmith.
  - name: get existing docker volumes
    shell: "docker volume ls -q"
    register: volume_output
    tags:
      - upgrade_only

  # Remove the appliance webroot so the codebase can be replaced.
  - name: remove ubersmith appliance webroot volume if present
    command: docker volume rm ubersmith_app_webroot
    args:
      chdir:  "{{ appliance_home }}"
    when: volume_output.stdout.find('ubersmith_app_webroot') != -1
    tags:
      - upgrade_only

  - name: run docker compose up -d
    command: docker-compose -p ubersmith up -d
    args:
      chdir: "{{ appliance_home }}"
    tags:
      - compose_up
      - upgrade

  # The database can take a little bit to start, so wait before proceeding with the upgrade.
  - name: wait for containers to come online
    wait_for:
      timeout: 15
    tags:
      - upgrade_only

  # Only when upgrading, run the upgrade script.
  - name: run upgrade.php
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith exec -T app_web php /var/www/appliance_root/www/upgrade.php"
    args:
      chdir:  "{{ appliance_home }}"
    environment:
      COMPOSE_INTERACTIVE_NO_CLI: 1
    tags:
      - upgrade_only

  # Cleanup unused Docker images to preserve disk space.
  - name: docker image cleanup
    shell: "docker rmi -f $(docker images -q -f dangling=true)"
    ignore_errors: yes
    tags:
      - upgrade_only
