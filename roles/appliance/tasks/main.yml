---
  # Store the configuration values specified during the deploy for use during
  # future upgrades.
  - name: set up ini_file for future use
    community.general.ini_file:
      dest: "{{ ansible_user_dir }}/.ubersmith_installer.ini"
      section: ubersmith_installer
      option: "{{ item.var }}"
      value: "{{ item.val }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0640
    with_items:
      - { var: 'appliance_home', val: "{{ appliance_home }}" }
      - { var: 'app_virtual_host', val: "{{ app_virtual_host }}" }

  # Create the directory structure required for Ubersmith to store configuration data
  # and other related files
  - name: create appliance configuration directories
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0775
    with_items:
       - "{{ appliance_home }}/conf/cron"
       - "{{ appliance_home }}/conf/httpd"
       - "{{ appliance_home }}/conf/httpd/sites-enabled"       
       - "{{ appliance_home }}/conf/mysql"
       - "{{ appliance_home }}/conf/php"
       - "{{ appliance_home }}/conf/ssl"
       - "{{ appliance_home }}/logs"
       - "{{ appliance_home }}/logs/appliance"
    tags:
      - mysql_config
      - httpd_config
      - upgrade

  - name: create rsyslog configuration
    ansible.builtin.copy:
      dest: /etc/rsyslog.d/30-ubersmith.conf
      src: 30-ubersmith.conf
      owner: root
      group: root
      mode: 0644
    ignore_errors: true
    notify:
      - restart rsyslog
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Add logrotate directives to keep Ubersmith logs compressed and rotated.
  - name: create log rotation configuration
    ansible.builtin.copy:
      dest: /etc/logrotate.d/ubersmith-logs
      src: ubersmith-logs
    ignore_errors: true
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # The Apache Virtual Host entry is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'app_web' container is
  # required if this file is modified.
  - name: create ubersmith apache virtual host configuration file
    ansible.builtin.template:
      src: appliance_vhost.j2
      dest: "{{ appliance_home }}/conf/httpd/sites-enabled/appliance.conf"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0640"
      backup: yes
      force: false
    tags:
      - upgrade

  # Get the system's timezone data for use in Docker Compose files
  - name: readlink /etc/localtime and register timezone_file
    ansible.builtin.shell: readlink -f /etc/localtime
    register: timezone_file
    tags:
      - compose_override_template
      - upgrade
    when: ansible_os_family != "Darwin"


  # Create the main Docker Compose file, which defines Ubersmith services as containers
  # and includes their configurations. This file may change with every release.
  - name: create docker compose file
    ansible.builtin.template:
      src: docker-compose.yml.j2
      dest: "{{ appliance_home }}/docker-compose.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    tags:
      - compose_template
      - upgrade

  # Create the override Docker Compose file. This file contains site specific changes and
  # will not be modified by future upgrades.
  - name: create docker compose override file
    ansible.builtin.template:
      src: docker-compose.override.yml.j2
      dest: "{{ appliance_home }}/docker-compose.override.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    tags:
      - compose_file

  # For existing installs, update to Docker Compose v3
  - name: update docker compose override file
    ansible.builtin.replace:
      path: "{{ appliance_home }}/docker-compose.override.yml"
      replace: "version: '3'"
      regexp: "version: '2'"
      backup: yes
    tags:
      - upgrade
      - update_compose_override_template

  # Update older override files to use the virtual host configuration file
  - name: ensure http virtual host configuration line exists
    ansible.builtin.lineinfile:
      path: "{{ appliance_home }}/docker-compose.override.yml"
      line: '      - "{{ appliance_home }}/conf/httpd/sites-enabled:/etc/apache2/sites-enabled"'
      insertafter: '      - "{{ appliance_home }}/conf/ssl/{{ app_virtual_host }}.key:/var/www/appliance_root/conf/ssl/appliance.key"'
    tags:
      - upgrade
      - update_compose_override_template

  # Copy over helper scripts 
  - name: copy backup script
    ansible.builtin.copy:
      src: backup_rrds.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700

  - name: copy appliance_restart
    ansible.builtin.copy:
      src: appliance_restart.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      force: no
    tags:
      - upgrade
  
  - name: copy appliance_start
    ansible.builtin.copy:
      src: appliance_start.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      force: no 
    tags:
      - upgrade

  - name: copy appliance_upgrade
    ansible.builtin.copy:
      src: appliance_upgrade.sh
      dest: "{{ appliance_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      force: no 
    tags:
      - upgrade

  # Check to see if the installation is using a remote database
  - name: check for remote database
    community.docker.docker_container_info:
      name: ubersmith-app_web-1
    register: app_web_container_info
    tags:
      - upgrade_only
      - database_location
      - mysql_upgrade_57
      - mysql_upgrade
      - mysql_permissions

  # Create a self signed certificate for temporary use to secure HTTP and SMTP traffic.
  # These files should be replaced with a certificate and key provided by an authorized CA.
  # The 'web' and 'mail' containers need to be restarted if these files are modified.
  - name: create self signed certificates
    ansible.builtin.command: "openssl req -new -x509 -days 365 -sha256 -newkey rsa:2048 -nodes -keyout {{ app_virtual_host }}.key -out {{ app_virtual_host }}.pem -subj '/O=Ubersmith/OU=Hosting/CN={{ app_virtual_host }}'"
    args:
      chdir: "{{ appliance_home }}/conf/ssl"
      creates: "{{ appliance_home }}/conf/ssl/{{ app_virtual_host }}.pem"
    when: ansible_os_family != "Windows"
    tags:
      - upgrade
      
  # Retrieve Ubersmith images from the repository.  
  - name: run docker compose pull
    ansible.builtin.command: "docker compose -p ubersmith pull"
    args:
      chdir: "{{ appliance_home }}"
    tags:
      - compose_pull
      - upgrade

  # Only when upgrading, stop and remove existing Ubersmith containers.
  - name: stop existing containers
    ansible.builtin.command: "docker compose -p ubersmith rm -sf"
    args:
      chdir:  "{{ appliance_home }}"
    tags:
      - upgrade_only

  # Only when upgrading, get the list of docker volumes, so the webroot
  # can be replaced by the new version of Ubersmith.
  - name: get existing docker volumes
    ansible.builtin.shell: "docker volume ls -q"
    register: volume_output
    tags:
      - upgrade_only

  # Remove the appliance webroot so the codebase can be replaced.
  - name: remove ubersmith appliance webroot volume if present
    ansible.builtin.command: docker volume rm ubersmith_app_webroot
    args:
      chdir:  "{{ appliance_home }}"
    when: volume_output.stdout.find('ubersmith_app_webroot') != -1
    tags:
      - upgrade_only

  - name: step the database up to mysql 5.7, if necessary
    community.docker.docker_container:
      name: ubersmith-app_db_57
      image: "{{ registry }}/ps57:{{ appliance_version }}-{{ containers.release_version }}"
      command: "mysqld --skip-grant-tables"
      container_default_behavior: compatibility
      log_driver: syslog
      log_options:
        tag: ubersmith/app_db_57
      volumes:
        - "ubersmith_app_database:/var/lib/mysql"
    when:
      - "'DATABASE_HOST=app_db' in app_web_container_info.container.Config.Env"
      - mysql_version == "5.6"
    tags:
      - upgrade_only
      - mysql_upgrade_57

  # The database can take a little bit to start, so wait
  - name: wait for mysql 5.7 container to come online
    community.docker.docker_container_info:
      name: ubersmith-app_db_57
    register: db_docker_container_info
    until: db_docker_container_info.container.State.Health.Status == "healthy"
    retries: 10
    delay: 30
    tags:
      - upgrade_only
      - mysql_upgrade_57

  - name: run mysql_upgrade for mysql 5.7
    community.docker.docker_container_exec:
      container: ubersmith-app_db_57
      command: /bin/sh -c 'mysql_upgrade -u root --skip-password'
    register: command_result
    failed_when: 
     - command_result.rc != 0
     - command_result.rc != 2
    when:
      - "'DATABASE_HOST=app_db' in app_web_container_info.container.Config.Env"
      - mysql_version == "5.6"
    tags:
      - upgrade_only
      - mysql_upgrade_57

  - name: remove mysql 5.7 container
    community.docker.docker_container:
      name: ubersmith-app_db_57
      state: absent

  # Ensure permissions on database files are correct
  - name: make sure UID/GID 1001 owns the database files
    community.docker.docker_container:
      name: busybox
      image: "busybox"
      container_default_behavior: compatibility
      command: "chown -R 1001:1001 /mysql"
      user: root
      auto_remove: yes
      log_driver: syslog
      log_options:
        tag: ubersmith/busybox
      volumes:
        - "ubersmith_app_database:/mysql"
    when:
      - "'DATABASE_HOST=app_db' in app_web_container_info.container.Config.Env"
    tags:
      - upgrade_only
      - mysql_permissions

  - name: run docker compose up -d
    ansible.builtin.command: docker compose -p ubersmith up -d
    args:
      chdir: "{{ appliance_home }}"
    tags:
      - compose_up
      - upgrade

  # The database can take a little bit to start, so wait
  - name: wait for containers to come online
    community.docker.docker_container_info:
      name: "{{ item }}"
    register: db_docker_container_info
    until: db_docker_container_info.container.State.Health.Status == "healthy"
    retries: 10
    delay: 30
    with_items:
      - ubersmith-app_web-1
      - ubersmith-app_db-1
      - ubersmith-app_cron-1

  # # When upgrading Percona Server, run mysql_upgrade. 0 and 2 return codes are acceptable.
  # - name: run mysql_upgrade
  #   community.docker.docker_container_exec:
  #     container: ubersmith-app_db-1
  #     command: /bin/sh -c 'mysql_upgrade -u root -p$MYSQL_ROOT_PASSWORD'
  #   register: command_result
  #   failed_when: 
  #    - command_result.rc != 0
  #    - command_result.rc != 2
  #   when:
  #     - "'DATABASE_HOST=app_db' in app_web_container_info.container.Config.Env"
  #   tags:
  #     - upgrade_only
  #     - mysql_upgrade

  # Configure appliance user password
  - name: configure uberapp user password
    community.mysql.mysql_query:
      login_db: uberapp
      login_host: localhost
      login_port: 3307
      login_user: uberapp
      login_password: "{{ mysql_appliance_password }}"
      query: UPDATE user SET password = %s WHERE login = %s
      positional_args:
        - "{{ uberapp_user_password }}"
        - ubersmith
    tags:
      - password

  # Only when upgrading, run the upgrade script.
  - name: run upgrade.php
    ansible.builtin.command: "docker compose -p ubersmith exec -T app_web php /var/www/appliance_root/www/upgrade.php"
    args:
      chdir:  "{{ appliance_home }}"
    environment:
      COMPOSE_INTERACTIVE_NO_CLI: 1
    tags:
      - upgrade_only

  # Cleanup unused Docker images to preserve disk space.
  - name: docker image cleanup
    community.docker.docker_prune:
      images: true
    tags:
      - upgrade_only
  
  # Output the appliance xml-rpc user password
  - name: output appliance xml-rpc username and password
    ansible.builtin.debug:
      msg:
      - "*** PLEASE NOTE ***"
      - "The appliance user has been configured with the following credentials:"
      - "username: ubersmith"
      - "password: {{ uberapp_user_password }}"
      - "Please use these values to configure the appliance entry in Ubersmith."
    tags:
      - password

  # Store the configuration values specified during the deploy for use during
  # future upgrades.
  - name: set post upgrade values in ini file for future use
    community.general.ini_file:
      dest: "{{ ansible_user_dir }}/.ubersmith_installer.ini"
      section: ubersmith_installer
      option: "{{ item.var }}"
      value: "{{ item.val }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0644"
    with_items:
      - { var: 'appliance_installed_version', val: "{{ appliance_version }}" }
      - { var: 'mysql_version', val: "8.0"}
    tags:
      - upgrade