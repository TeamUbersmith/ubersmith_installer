---
  # Store the configuration values specified during the deploy for use during
  # future upgrades.
  - name: set up ini file for future use
    ini_file:
      dest: "{{ ansible_user_dir }}/.ubersmith_installer.ini"
      section: ubersmith_installer
      option: "{{ item.var }}"
      value: "{{ item.val }}"
    with_items:
      - { var: 'ubersmith_home', val: "{{ ubersmith_home }}" }
      - { var: 'virtual_host', val: "{{ virtual_host }}" }
      - { var: 'admin_email', val: "{{ admin_email }}" }

  # Stop and disable MTAs; Ubersmith provides its own mail service
  # If this fails, it's okay, but the Ubersmith mail container won't start
  # if an MTA is still running and/or 25/tcp is in use.
  - name: stop and disable mail transfer agents
    service:
      name: "{{item}}"
      enabled: no
      state: stopped
    with_items:
      - postfix
      - sendmail
      - exim4
    ignore_errors: yes
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"
    tags:
      - disable_mtas

  # Updates to docker-compose remove the project_container_index syntax
  - name: alert admin to necessary license updates
    pause:
      prompt: "When upgrading from versions prior to Ubersmith 4.3.0, a change is being made to the naming convention for the database host. Please contact support@ubersmith.com to ensure your license record is updated (CTRL+C to continue)"
    when:
      - interactive
    tags:
      - upgrade_only

  # Create the directory structure required for Ubersmith to store configuration data
  # and other related files
  - name: create ubersmith configuration directories
    file:
      path: "{{ item }}"
      state: directory
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0775
    with_items:
       - "{{ ubersmith_home }}/logs/ubersmith"
       - "{{ ubersmith_home }}/conf/mail"
       - "{{ ubersmith_home }}/conf/mysql"
       - "{{ ubersmith_home }}/conf/ssl"
       - "{{ ubersmith_home }}/conf/httpd"
       - "{{ ubersmith_home }}/conf/httpd/sites-enabled"
       - "{{ ubersmith_home }}/conf/php"
       - "{{ ubersmith_home }}/conf/cron"
       - "{{ ubersmith_home }}/conf/rwhois"
       - "{{ ubersmith_home }}/app/custom"
       - "{{ ubersmith_home }}/app/custom/locale"
       - "{{ ubersmith_home }}/app/custom/plugins"
       - "{{ ubersmith_home }}/app/custom/include"
       - "{{ ubersmith_home }}/app/custom/include/service_modules"
       - "{{ ubersmith_home }}/app/custom/include/device_modules"
       - "{{ ubersmith_home }}/app/custom/include/order_modules"
       - "{{ ubersmith_home }}/app/custom/.well-known"
       - "{{ ubersmith_home }}/app/custom/.well-known/acme-challenge"
    tags:
      - mysql_config
      - httpd_config
      - upgrade

  # Add configuration directives to rsyslog for handling incoming logs from Ubersmith
  # Docker containers.
  - name: create rsyslog configuration
    copy:
      dest: /etc/rsyslog.d/30-ubersmith.conf
      src: 30-ubersmith.conf
    ignore_errors: yes
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Add logrotate directives to keep Ubersmith logs compressed and rotated.
  - name: create log rotation configuration
    copy:
      dest: /etc/logrotate.d/ubersmith-logs
      src: ubersmith-logs
    ignore_errors: yes
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # The Apache Virtual Host entry is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'web' container is
  # required if this file is modified.
  - name: create ubersmith apache virtual host configuration file
    template:
      src: instance_vhost.j2
      dest: "{{ ubersmith_home }}/conf/httpd/sites-enabled/{{ virtual_host }}.conf"

  # The Percona Server configuration file is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'db' container is
  # required if this file is modified.
  - name: create percona server configuration overrides
    template:
      src: ubersmith.cnf.j2
      dest: "{{ ubersmith_home }}/conf/mysql/ubersmith.cnf"
    tags:
      - mysql_config
  
  # The database server configuration requires a change to sql_mode when running 
  # Percona Server 5.7
  - name: ensure sql_mode line exists
    lineinfile:
      path: /usr/local/ubersmith/conf/mysql/ubersmith.cnf
      line: 'sql_mode = "NO_ENGINE_SUBSTITUTION"'
    when:
      - containers.db_version == 5.7
    tags:
      - upgrade_only

  # The PHP override configuration file is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'php' container is
  # required if this file is modified.
  - name: create ubersmith.ini file
    template:
      src: ubersmith.ini.j2
      dest: "{{ ubersmith_home }}/conf/php/ubersmith.ini"
    tags:
      - php_ini

  # The xinetd configuration file for rwhois  is created on the local filesystem to
  # facilitate editing without having to enter the container. A restart of the 'rwhois'
  # container is required if this file is modified.
  - name: create rwhois configuration file
    template:
      src: rwhois.j2
      dest: "{{ ubersmith_home }}/conf/rwhois/rwhois"
    tags:
      - rwhois

  # Create a self signed certificate for temporary use to secure HTTP and SMTP traffic.
  # These files should be replaced with a certificate and key provided by an authorized CA.
  # The 'web' and 'mail' containers need to be restarted if these files are modified.
  - name: create self signed certificates
    command: "openssl req -new -x509 -days 365 -sha256 -newkey rsa:2048 -nodes -keyout {{ virtual_host }}.key -out {{ virtual_host }}.pem -subj '/O=Ubersmith/OU=Hosting/CN={{ virtual_host }}'"
    args:
      chdir: "{{ ubersmith_home }}/conf/ssl"
      creates: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.pem"
    when: ansible_os_family != "Windows"

  # Get the system's timezone data for use in Docker Compose files
  - name: readlink /etc/localtime and register timezone_file
    shell: readlink -f /etc/localtime
    register: timezone_file
    tags:
      - compose_override_template
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Create the main Docker Compose file, which defines Ubersmith services as containers
  # and includes their configurations. This file may change with every release.
  - name: create docker compose file
    template:
      src: docker-compose.yml.j2
      dest: "{{ ubersmith_home }}/docker-compose.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    tags:
      - compose_template
      - upgrade

  # Create the override Docker Compose file. This file contains site specific changes and
  # will not be modified by future upgrades.
  - name: create docker compose override file
    template:
      src: docker-compose.override.yml.j2
      dest: "{{ ubersmith_home }}/docker-compose.override.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    tags:
      - compose_override_template
  
  # For existing installs, update to Docker Compose v3
  - name: update docker compose override file
    replace:
      path: "{{ ubersmith_home }}/docker-compose.override.yml"
      replace: "version: '3'"
      regexp: "version: '2'"
      backup: yes
    tags:
      - upgrade_only
      - update_compose_override_template

  # For existing installs, update to current supported PHP release
  - name: update docker compose override file for php version
    replace:
      path: /usr/local/ubersmith/docker-compose.override.yml
      replace: "/etc/php/{{ php_version }}"
      regexp: "/etc/php/{{ item }}"
      backup: yes
    with_items: 
      - "{{ old_php_versions }}"
    tags:
      - upgrade_only
      - update_compose_override_template

  # Copy a helper script which allows Ubersmith containers to be restarted.
  - name: copy ubersmith_restart
    copy:
      src: ubersmith_restart.sh
      dest: "{{ ubersmith_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
    tags:
      - upgrade

  # Copy a helper script which allows Ubersmith containers to be started.
  - name: copy ubersmith_start
    copy:
      src: ubersmith_start.sh
      dest: "{{ ubersmith_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      
  # Retrieve Ubersmith images from the repository.
  - name: pull ubersmith images
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith pull"
    args:
      chdir:  "{{ ubersmith_home }}"
    tags:
      - compose_pull
      - upgrade

  # Only when upgrading, get the list of docker volumes, so the webroot
  # can be replaced by the new version of Ubersmith.
  - name: get existing docker volumes
    shell: "docker volume ls -q"
    register: volume_output
    tags:
      - upgrade_only

  # Only when upgrading, make sure redis data is committed before we copy it.  
  - name: trigger save of redis data if redis volume does not already exist
    command: docker exec ubersmith_redis_1 redis-cli SAVE
    args:
      chdir:  "{{ ubersmith_home }}"
    when: volume_output.stdout.find('ubersmith_redis') == -1
    ignore_errors: yes
    tags:
      - upgrade_only

  # Only when upgrading, copy redis data so it can be migrated to the redis-data container.
  - name: make a copy of dump.rdb if redis volume does not already exist
    command: docker cp ubersmith_redis_1:/data/dump.rdb .
    args:
      chdir:  "{{ ubersmith_home }}"
    when: volume_output.stdout.find('ubersmith_redis') == -1
    ignore_errors: yes
    tags:
      - upgrade_only

  # Only when upgrading, stop and remove existing Ubersmith containers.
  - name: stop existing containers
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith rm -sf"
    args:
      chdir:  "{{ ubersmith_home }}"
    tags:
      - upgrade_only

  - name: remove ubersmith webroot volume if present
    command: docker volume rm ubersmith_webroot
    args:
      chdir:  "{{ ubersmith_home }}"
    when: volume_output.stdout.find('ubersmith_webroot') != -1
    tags:
      - upgrade_only
  
  # This is an unfortunate side effect of moving to Docker Compose v3, and the fact that
  # Ubersmith does not manage timezones within software (yet)
  - name: give the administrator a chance to update docker-compose.override.yml
    pause:
      prompt: "Make sure docker-compose.override.yml has been updated to include a ports directive for web, and timezone volume entries for all containers (CTRL+C to continue)"
    when:
      - interactive
    tags:
      - upgrade_only

  # For both new deploys and upgrades, start Ubersmith.
  - name: run ubersmith_start.sh
    command: "{{ ubersmith_home }}/ubersmith_start.sh"
    args:
      chdir: "{{ ubersmith_home }}"
    tags:
      - upgrade
  
  # Let's Encrypt requires an account key to be used when issuing requests.
  - name: create let's encrypt account key
    command: "openssl genrsa -out le_account.key 4096"
    args:
      chdir: "{{ ubersmith_home }}/conf/ssl"
      creates: "{{ ubersmith_home }}/conf/ssl/le_account.key"
    when: ansible_os_family != "Windows"
    tags:
      - letsencrypt

  # Create the private key and certificate signing request for Let's Encrypt.
  - name: create private key and csr
    command: "openssl req -nodes -newkey rsa:4096 -keyout {{ virtual_host }}.le.key -out {{ virtual_host }}.le.csr -subj '/O=Ubersmith/OU=Hosting/CN={{ virtual_host }}'"
    args:
      chdir: "{{ ubersmith_home }}/conf/ssl"
      creates: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.le.key"
    when: ansible_os_family != "Windows"
    tags:
      - letsencrypt

  # Generate the challenge data and request for Let's Encrypt.
  - name: generate let's encrypt request
    acme_certificate:
      account_key: "{{ ubersmith_home }}/conf/ssl/le_account.key"
      csr: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.le.csr"
      dest: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.le.pem"
      acme_directory: https://acme-v02.api.letsencrypt.org/directory
      acme_version: 2
      terms_agreed: yes
    register: le_challenge
    ignore_errors: yes
    tags:
      - letsencrypt
 
  # Copy the challenge data for Let's Encrypt into the Ubersmith webroot.
  - name: copy let's encrypt challenge data into webroot
    copy:
      dest: "{{ ubersmith_home }}/app/custom/{{ le_challenge['challenge_data'][virtual_host]['http-01']['resource'] }}"
      content: "{{ le_challenge['challenge_data'][virtual_host]['http-01']['resource_value'] }}"
    when: le_challenge is changed
    tags:
      - letsencrypt

  # Restart the web container to pick up the challenge data.
  - name: restart the web container
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith restart web"
    args:
      chdir:  "{{ ubersmith_home }}"
    tags:
      - letsencrypt

  # If Ubersmith is behind a load balancer or proxy, it may take a moment for it to allow connections.
  - name: give LB / proxy a chance to notice web server has returned
    pause:
      seconds: 5
    tags:
      - letsencrypt
 
  # Have Let's Encrypt verify our challenge data and hopefully issue a certificate.
  - name: let's encrypt wrapup 
    acme_certificate:
      account_key: "{{ ubersmith_home }}/conf/ssl/le_account.key"
      csr: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.le.csr"
      dest: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.le.pem"
      data: "{{ le_challenge }}"
      acme_directory: https://acme-v02.api.letsencrypt.org/directory
      acme_version: 2
      terms_agreed: yes
    ignore_errors: yes
    tags:
      - letsencrypt

  # See if our Let's Encrypt requests were successful. 
  - name: verify that let's encrypt certificate was issued
    stat:
      path: "{{ ubersmith_home }}/conf/ssl/{{ virtual_host }}.le.pem"
    register: le_pem
    tags:
      - letsencrypt
      - le_renewal
      - le_virtual_host_update
  
  # Update Apache's virtual host configuration to use the newly issued certificate.
  - name: update virtual host configuration
    lineinfile:
      path: "{{ ubersmith_home }}/conf/httpd/sites-enabled/{{ virtual_host }}.conf"
      regexp: "{{ item.regexp }}"
      line: "{{ item.replacement }}"
    with_items:
      - { regexp: 'SSLCertificateFile {{ ubersmith_root }}/conf/ssl/{{ virtual_host }}.pem', replacement: '  SSLCertificateFile {{ ubersmith_root }}/conf/ssl/{{ virtual_host }}.le.pem' }
      - { regexp: 'SSLCertificateKeyFile {{ ubersmith_root }}/conf/ssl/{{ virtual_host }}.key', replacement: '  SSLCertificateKeyFile {{ ubersmith_root }}/conf/ssl/{{ virtual_host }}.le.key' }
      - { regexp: ' # SSLCACertificateFile {{ ubersmith_root }}/conf/ssl/cabundle.pem', replacement: '  SSLCACertificateFile {{ ubersmith_root }}/conf/ssl/cabundle.pem' }
    when: le_pem.stat.exists
    tags:
      - letsencrypt
      - le_virtual_host_update
  
  # Retrieve the Let's Encrypt certificate bundle to complete the certificate chain.
  - name: download let's encrypt CA bundle
    get_url: 
      url: https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem.txt
      dest: "{{ ubersmith_home }}/conf/ssl/cabundle.pem"
      force: no
    when: le_pem.stat.exists
    tags:
      - letsencrypt

  # Restart the web container to use the newly issued LE certificate.
  - name: restart the web container
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose -p ubersmith restart web"
    args:
      chdir:  "{{ ubersmith_home }}"
    when: le_pem.stat.exists
    tags:
      - letsencrypt

  # Create playbook to automatically keep the Let's Encrypt certificate up to date.
  - name: create let's encrypt renewal playbook
    template:
      src: le_renewal.yml.j2
      dest: "{{ ubersmith_home }}/le_renewal.yml"
      owner: "{{ ansible_user }}"
      mode: 0600
      backup: yes
    when: le_pem.stat.exists
    tags:
      - le_renewal
      - letsencrypt

  # Create a cron job to see if the Let's Encrypt certificate needs to be renewed.
  - name: let's encrypt renewal cron task
    cron:
      name: "check for le renewal"
      job: "{{ ansible_user_dir }}/.local/bin/ansible-playbook -i 'localhost,' -c local {{ ubersmith_home }}/le_renewal.yml &> /dev/null"
      user: "{{ ansible_user }}"
      special_time: daily
    when:
      - le_pem.stat.exists
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"
    tags:
      - le_renewal
      - letsencrypt

  # Solr can take a little bit to start, so wait before proceeding with the upgrade.
  - name: wait for containers to come online
    wait_for:
      timeout: 15
    tags:
      - upgrade_only

  # Copy redis data dumped from the redis locking container to the redis data container's volume
  - name: copy dump.rdb if redis volume does not exist
    command: docker cp dump.rdb ubersmith_redis-data_1:/data/dump.rdb
    args:
      chdir:  /usr/local/ubersmith
    when: volume_output.stdout.find('ubersmith_redis') == -1
    ignore_errors: yes
    tags:
      - upgrade_only

  # Change ownership on the redis dump.rdb file to redis:redis
  - name: give redis user ownership over dump.rdb
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose exec -T redis-data chown redis:redis /data/dump.rdb"
    args:
      chdir:  "{{ ubersmith_home }}"
    environment:
      COMPOSE_INTERACTIVE_NO_CLI: 1
    when: volume_output.stdout.find('ubersmith_redis') == -1
    ignore_errors: yes
    tags:
      - upgrade_only


  # For upgrades, run the updatedb.php script which performs the upgrade process.
  - name: run updatedb.php
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose exec -T php php {{ ubersmith_root }}/app/www/setup/updatedb.php ubersmith --debug"
    args:
      chdir:  "{{ ubersmith_home }}"
    environment:
      COMPOSE_INTERACTIVE_NO_CLI: 1
    register: updatedb_output
    tags:
      - upgrade_only

  # Show the upgrade output, in the event of any issues.
  - name: display updatedb.php debug output
    debug: var=updatedb_output.stdout_lines
    tags:
      - upgrade_only

  # For upgrades, remove the setup/ directory, allowing Ubersmith to start.
  - name: remove setup
    command: "{{ ansible_user_dir }}/.local/bin/docker-compose exec -T web rm -rf {{ ubersmith_root }}/app/www/setup"
    args:
      chdir:  "{{ ubersmith_home }}"
    environment:
      COMPOSE_INTERACTIVE_NO_CLI: 1
    tags:
      - upgrade_only
