---

  # In the event of a failed upgrade attempt, ensure the bare minimum of containers is running before proceeding
  # docker compose up -d web db php
  - name: check ubersmith containers before proceeding with upgrade
    ansible.builtin.command: docker compose up -d web db php
    args:
      chdir: "{{ ubersmith_home }}"
    tags:
      - upgrade_only

  # Backups are important, but especially with database version changes in 5.0.0
  - name: remind admin to make a backup before proceeding with an upgrade
    ansible.builtin.pause:
      prompt: "Please ensure you have made a backup of your Ubersmith database before proceeding with the upgrade process. (CTRL+C to continue)"
    when:
      - interactive
    tags:
      - upgrade_only
  
  # See if {{ ubersmith_home }}/.patched exists, abort if it does.
  - name: determine if the installation has been patched
    ansible.builtin.stat:
      path: "{{ ubersmith_home }}/.patched"
    register: patched
    when:
      - interactive
    tags:
      - upgrade_only

  - name: fail if ubersmith has been patched
    ansible.builtin.fail:
      msg: "Ubersmith appears to be patched. Review the patch configuration and remove the file .patched from {{ ubersmith_home }} to proceed."
    when: 
      - patched.stat.exists
      - interactive
    tags:
      - upgrade_only

  # Store the configuration values specified during the deploy for use during
  # future upgrades.
  - name: set up ini file for future use
    community.general.ini_file:
      dest: "{{ ansible_user_dir }}/.ubersmith_installer.ini"
      section: ubersmith_installer
      option: "{{ item.var }}"
      value: "{{ item.val }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0640"
    with_items:
      - { var: 'ubersmith_home', val: "{{ ubersmith_home }}" }
      - { var: 'virtual_host', val: "{{ virtual_host }}" }
      - { var: 'admin_email', val: "{{ admin_email }}" }
    tags:
      - new_brand

  # Stop and disable MTAs; Ubersmith provides its own mail service
  # If this fails, it's okay, but the Ubersmith mail container won't start
  # if an MTA is still running and/or 25/tcp is in use.
  - name: stop and disable mail transfer agents
    ansible.builtin.service:
      name: "{{ item }}"
      enabled: no
      state: stopped
    with_items:
      - postfix
      - sendmail
      - exim4
    ignore_errors: true
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"
    tags:
      - disable_mtas

  # Updates to docker-compose remove the project_container_index syntax
  - name: alert admin to necessary license updates
    ansible.builtin.pause:
      prompt: "When upgrading from versions prior to Ubersmith 4.3.0, a change is being made to the naming convention for the database host. Please contact support@ubersmith.com to ensure your license record is updated (CTRL+C to continue)"
    when:
      - interactive
      - ubersmith_installed_version is version_compare('4.3.0', '>' )
    tags:
      - upgrade_only

  # Create the directory structure required for Ubersmith to store configuration data
  # and other related files
  - name: create ubersmith configuration directories
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0775
    with_items:
       - "{{ ubersmith_home }}/logs/ubersmith"
       - "{{ ubersmith_home }}/conf/mail"
       - "{{ ubersmith_home }}/conf/mysql"
       - "{{ ubersmith_home }}/conf/ssl"
       - "{{ ubersmith_home }}/conf/httpd"
       - "{{ ubersmith_home }}/conf/httpd/sites-enabled"
       - "{{ ubersmith_home }}/conf/php"
       - "{{ ubersmith_home }}/conf/cron"
       - "{{ ubersmith_home }}/conf/rwhois"
       - "{{ ubersmith_home }}/conf/certbot"
       - "{{ ubersmith_home }}/conf/certbot/lib"
       - "{{ ubersmith_home }}/conf/certbot/etc"
       - "{{ ubersmith_home }}/conf/certbot/etc/renewal-hooks"
       - "{{ ubersmith_home }}/conf/certbot/etc/renewal-hooks/deploy"
       - "{{ ubersmith_home }}/conf/certbot/log"
       - "{{ ubersmith_home }}/conf/sso"
       - "{{ ubersmith_home }}/conf/falco"
       - "{{ ubersmith_home }}/app/custom"
       - "{{ ubersmith_home }}/app/custom/locale"
       - "{{ ubersmith_home }}/app/custom/plugins"
       - "{{ ubersmith_home }}/app/custom/include"
       - "{{ ubersmith_home }}/app/custom/include/service_modules"
       - "{{ ubersmith_home }}/app/custom/include/device_modules"
       - "{{ ubersmith_home }}/app/custom/include/order_modules"
       - "{{ ubersmith_home }}/app/custom/.well-known"
       - "{{ ubersmith_home }}/app/custom/.well-known/acme-challenge"
       - "{{ ubersmith_home }}/app/patches"
    tags:
      - mysql_config
      - httpd_config
      - upgrade

  # Add configuration directives to rsyslog for handling incoming logs from Ubersmith
  # Docker containers.
  - name: create rsyslog configuration
    ansible.builtin.copy:
      dest: /etc/rsyslog.d/30-ubersmith.conf
      src: 30-ubersmith.conf
      owner: root
      group: root
      mode: "0644"
    ignore_errors: true
    notify:
      - restart rsyslog
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Add logrotate directives to keep Ubersmith logs compressed and rotated.
  - name: create log rotation configuration
    ansible.builtin.copy:
      dest: /etc/logrotate.d/ubersmith-logs
      src: ubersmith-logs
      owner: root
      group: root
      mode: "0644"
    ignore_errors: true
    tags:
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # The Apache Virtual Host entry is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'web' container is
  # required if this file is modified.
  - name: create ubersmith apache virtual host configuration file
    ansible.builtin.template:
      src: instance_vhost.j2
      dest: "{{ ubersmith_home }}/conf/httpd/sites-enabled/{{ item }}.conf"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0640"
      backup: yes
    with_items: "{{ virtual_hosts }}"
    tags:
      - new_brand

  # The Percona Server configuration file is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'db' container is
  # required if this file is modified.
  - name: create percona server configuration overrides
    ansible.builtin.template:
      src: "ubersmith.cnf.{{ ubersmith_major_version }}.j2"
      dest: "{{ ubersmith_home }}/conf/mysql/ubersmith.cnf"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0644"
    tags:
      - mysql_config
      - upgrade

  # The MySQL component configuration files is created on the local filesystem to
  # enable at-rest encryption.
  - name: create mysql component configuration
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "{{ ubersmith_home }}/conf/mysql-components/{{ item }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0644"
    with_items:
      - component_keyring_file.cnf
      - mysqld.my
    tags:
      - mysql_config
      - upgrade

  # The PHP override configuration file is created on the local filesystem to facilitate
  # editing without having to enter the container. A restart of the 'php' container is
  # required if this file is modified.
  - name: create ubersmith.ini file
    ansible.builtin.template:
      src: ubersmith.ini.j2
      dest: "{{ ubersmith_home }}/conf/php/ubersmith.ini"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0644"
    tags:
      - php_ini

  # The xinetd configuration file for rwhois  is created on the local filesystem to
  # facilitate editing without having to enter the container. A restart of the 'rwhois'
  # container is required if this file is modified.
  - name: create rwhois configuration file
    ansible.builtin.template:
      src: rwhois.j2
      dest: "{{ ubersmith_home }}/conf/rwhois/rwhois"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0644"
    tags:
      - rwhois

  # This deploy hook will copy certificates into conf/ssl after they've been renewed.
  - name: install web certbot deploy hook
    ansible.builtin.template:
      src: ubersmith-deploy.sh.j2
      dest: "{{ ubersmith_home }}/conf/certbot/etc/renewal-hooks/deploy/ubersmith-deploy.sh"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0755
    tags:
      - certbot
      - certbot_deploy_hook
      - upgrade

  # This deploy hook will copy certificates into conf/ssl after they've been renewed.
  - name: install mail certbot deploy hook
    ansible.builtin.template:
      src: postfix-deploy.sh.j2
      dest: "{{ ubersmith_home }}/conf/certbot/etc/renewal-hooks/deploy/postfix-deploy.sh"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0755
    tags:
      - certbot
      - certbot_deploy_hook
      - upgrade

  # Create a self signed certificate for temporary use to secure HTTP and SMTP traffic.
  # These files should be replaced with a certificate and key provided by an authorized CA.
  # The 'web' and 'mail' containers need to be restarted if these files are modified.
  - name: create private keys rsa 4096 bits
    community.crypto.openssl_privatekey:
      path: "{{ ubersmith_home }}/conf/ssl/{{ item }}.key"
    with_items: "{{ virtual_hosts }}"
    tags:
      - selfsigned
      - new_brand

  - name: create certificate signing requests
    community.crypto.openssl_csr:
      path: "{{ ubersmith_home }}/conf/ssl/{{ item }}.csr"
      privatekey_path: "{{ ubersmith_home }}/conf/ssl/{{ item }}.key"
      organization_name: Ubersmith
      organizational_unit_name: Hosting
      common_name: "{{ item }}"
    with_items: "{{ virtual_hosts }}"
    tags:
      - selfsigned
      - new_brand

  - name: create self signed certificates
    community.crypto.x509_certificate:
      path: "{{ ubersmith_home }}/conf/ssl/{{ item }}.pem"
      privatekey_path: "{{ ubersmith_home }}/conf/ssl/{{ item }}.key"
      csr_path: "{{ ubersmith_home }}/conf/ssl/{{ item }}.csr"
      provider: selfsigned
    with_items: "{{ virtual_hosts }}"
    tags:
      - selfsigned
      - new_brand

  # Request certificates from Let's Encrypt
  - name: wait for port 80 to become available
    ansible.builtin.wait_for:
      host: 0.0.0.0
      port: 80
      state: drained
    when:
     - lets_encrypt_certificate is defined
     - lets_encrypt_certificate == 'yes'
    tags:
      - certbot

  - name: run certbot via a container
    community.docker.docker_container:
      name: certbot
      image: "certbot/certbot:{{ certbot_version }}"
      container_default_behavior: compatibility
      command: "certonly -n -d {{ item }} --standalone --agree-tos -m {{ notify_email }}"
      user: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"
      ports:
        - "80:80"
      auto_remove: yes
      volumes:
        - "{{ ubersmith_home }}/conf/certbot/etc:/etc/letsencrypt"
        - "{{ ubersmith_home }}/conf/certbot/lib:/var/lib/letsencrypt"
        - "{{ ubersmith_home }}/conf/certbot/log:/var/log/letsencrypt"
    with_items: "{{ virtual_hosts }}"
    when:
     - lets_encrypt_certificate is defined
     - lets_encrypt_certificate == 'yes'
    tags:
      - certbot

  - name: wait for port 80 to become available
    ansible.builtin.wait_for:
      host: 0.0.0.0
      port: 80
      state: drained
    when:
     - lets_encrypt_certificate is defined
     - lets_encrypt_certificate == 'yes'
    tags:
      - certbot

  - name: manually run deploy hooks
    community.docker.docker_container:
      name: certbot
      image: "certbot/certbot:{{ certbot_version }}"
      container_default_behavior: compatibility
      entrypoint: /etc/letsencrypt/renewal-hooks/deploy/ubersmith-deploy.sh
      user: "{{ ansible_user_uid }}:{{ ansible_user_gid }}"
      auto_remove: yes
      env:
        RENEWED_DOMAINS: "{{ item }}"
      volumes:
        - "{{ ubersmith_home }}/conf/certbot/etc:/etc/letsencrypt"
        - "{{ ubersmith_home }}/conf/certbot/lib:/var/lib/letsencrypt"
        - "{{ ubersmith_home }}/conf/certbot/log:/var/log/letsencrypt"
        - "{{ ubersmith_home }}/conf/ssl:/opt/certbot/deploy"
    with_items: "{{ virtual_hosts }}"
    when:
     - lets_encrypt_certificate is defined
     - lets_encrypt_certificate == 'yes'
    tags:
      - certbot
      - certbot_renewal

  - name: wait for port 80 to become available
    ansible.builtin.wait_for:
      host: 0.0.0.0
      port: 80
      state: drained
    when:
     - lets_encrypt_certificate is defined
     - lets_encrypt_certificate == 'yes'
    tags:
      - certbot

  # Create a shell script to keep the Let's Encrypt certificate renewed
  - name: create certbot renewal shell script
    ansible.builtin.template:
      src: ubersmith_certbot_renew.sh.j2
      dest: "{{ ubersmith_home }}/ubersmith_certbot_renew.sh"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
      backup: yes
    tags:
      - le_renewal
      - certbot
      - upgrade

  # Create a cron task to call the renewal script once daily
  - name: create certbot container cron task
    ansible.builtin.cron:
      name: "check for le renewal"
      user: "{{ ansible_user_id }}"
      job: "{{ ubersmith_home }}/ubersmith_certbot_renew.sh"
      special_time: daily
    when:
     - lets_encrypt_certificate is defined
     - lets_encrypt_certificate == 'yes'
    tags:
      - le_renewal
      - certbot
      - upgrade

  # Get the system's timezone data for use in Docker Compose files
  - name: readlink /etc/localtime and register timezone_file
    ansible.builtin.stat:
      path: /etc/localtime
    register: timezone_file
    tags:
      - compose_override_template
      - upgrade
    when: 
      - ansible_os_family != "Darwin"
      - ansible_os_family != "Windows"

  # Create the main Docker Compose file, which defines Ubersmith services as containers
  # and includes their configurations. This file may change with every release.
  - name: create docker compose file
    ansible.builtin.template:
      src: docker-compose.yml.j2
      dest: "{{ ubersmith_home }}/docker-compose.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    vars:
      container_domain: "{{ main_virtual_host }}"
    tags:
      - compose_template
      - upgrade

  # Create the override Docker Compose file. This file contains site specific changes and
  # will not be modified by future upgrades.
  - name: create docker compose override file
    ansible.builtin.template:
      src: docker-compose.override.yml.j2
      dest: "{{ ubersmith_home }}/docker-compose.override.yml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0600
      backup: yes
    vars:
      container_domain: "{{ main_virtual_host }}"
    tags:
      - compose_override_template
  
  # For existing installs, update to Docker Compose v3
  - name: update docker compose override file
    ansible.builtin.replace:
      path: "{{ ubersmith_home }}/docker-compose.override.yml"
      replace: "version: '3'"
      regexp: "version: '2'"
      backup: yes
    tags:
      - upgrade_only
      - update_compose_override_template

  # For existing installs, update to current supported PHP release
  - name: update docker compose override file for php version
    ansible.builtin.replace:
      path: "{{ ubersmith_home }}/docker-compose.override.yml"
      replace: "/etc/php/{{ php_version }}"
      regexp: "/etc/php/{{ item }}"
      backup: yes
    with_items: 
      - "{{ old_php_versions }}"
    tags:
      - upgrade_only
      - update_compose_override_template

  # For existing installs, modify location of apache virtual host configuration
  - name: update docker compose override file for apache virtual hosts
    ansible.builtin.replace:
      path: "{{ ubersmith_home }}/docker-compose.override.yml"
      replace: "/usr/local/apache2/conf/sites-enabled"
      regexp: "/etc/apache2/sites-enabled"
      backup: yes
    tags:
      - upgrade_only
      - update_compose_override_template

  # Copy a helper script which allows Ubersmith containers to be restarted.
  - name: copy ubersmith_restart
    ansible.builtin.copy:
      src: ubersmith_restart.sh
      dest: "{{ ubersmith_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
    tags:
      - upgrade

  # Copy a helper script which allows Ubersmith containers to be started.
  - name: copy ubersmith_start
    ansible.builtin.copy:
      src: ubersmith_start.sh
      dest: "{{ ubersmith_home }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0700
    tags:
      - upgrade

  # Copy the falco rules file which allows Ubersmith to provide FIM services
  - name: copy falco rules
    ansible.builtin.copy:
      src: falco_rules.local.yaml
      dest: "{{ ubersmith_home }}/conf/falco/falco_rules.local.yaml"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: 0644
    tags:
      - upgrade

  # Older versions scale redis to 1, we need it scaled to 3
  - name: ensure redis line exists
    ansible.builtin.lineinfile:
      path: "{{ ubersmith_home }}/ubersmith_start.sh"
      regexp: "^#?\\s?docker-compose -p ubersmith up --scale redis=\\d -d redis"
      line: "docker compose -p ubersmith up --scale redis=3 -d redis"
      insertafter: "^docker-compose -p ubersmith up (.*)"
    tags:
      - upgrade_only
      - upgrade_prep

  # Check to see if the installation is using a remote database
  - name: check for remote database
    community.docker.docker_container_info:
      name: ubersmith-web-1
    register: web_container_info
    tags:
      - upgrade_only
      - database_location
      - mysql_keyring_backup


  - name: display web container info
    ansible.builtin.debug:
      var: web_container_info
    when:
      - debug is defined
    tags:
      - upgrade_only

  # Only when upgrading, get the existing volumes, so the webroot
  # can be replaced by the new version of Ubersmith.
  - name: get existing redis volume
    community.docker.docker_volume_info:
      name: ubersmith_redis
    register: redis_volume_output
    tags:
      - upgrade_only

  - name: get existing webroot volume
    community.docker.docker_volume_info:
      name: ubersmith_webroot
    register: webroot_volume_output
    tags:
      - upgrade_only

  # Only when upgrading, make sure redis data is committed before we copy it.  
  - name: trigger save of redis data if redis volume does not already exist
    community.docker.docker_container_exec:
      container: ubersmith-redis-1
      command: /bin/bash -c "/usr/local/bin/redis-cli SAVE"
    when: not redis_volume_output.exists
    ignore_errors: true
    tags:
      - upgrade_only

  # Only when upgrading, copy redis data so it can be migrated to the redis-data container.
  - name: make a copy of dump.rdb if redis volume does not already exist
    ansible.builtin.command: docker cp ubersmith-redis-1:/data/dump.rdb .
    args:
      chdir:  "{{ ubersmith_home }}"
    when: not redis_volume_output.exists
    ignore_errors: true
    tags:
      - upgrade_only

  # Only when upgrading, stop and remove default existing Ubersmith containers.
  # docker compose rm -s -f
  - name: stop existing containers
    ansible.builtin.command: docker compose rm -s -f web cron db php solr mail rsyslog rwhois redis redis-data certbot
    args:
      chdir: "{{ ubersmith_home }}"
    tags:
      - upgrade_only

  - name: remove ubersmith webroot volume if present
    community.docker.docker_volume:
      name: ubersmith_webroot
      state: absent
    when: webroot_volume_output.exists
    tags:
      - upgrade_only
  
  # This is an unfortunate side effect of moving to Docker Compose v3, and the fact that
  # Ubersmith does not manage timezones within software (yet)
  - name: give the administrator a chance to update docker-compose.override.yml
    ansible.builtin.pause:
      prompt: "Make sure docker-compose.override.yml has been updated to include a ports directive for web, and timezone volume entries for all containers (CTRL+C to continue)"
    when:
      - interactive
      - ubersmith_installed_version is version_compare('4.6.0', '>' )
    tags:
      - upgrade_only
  
  # Ensure permissions on database files are correct
  - name: make sure UID/GID 1001 owns the database files
    community.docker.docker_container:
      name: busybox
      image: "busybox"
      container_default_behavior: compatibility
      command: "chown -R 1001:1001 /mysql"
      user: root
      auto_remove: yes
      log_driver: syslog
      log_options:
        tag: ubersmith/busybox
      volumes:
        - "ubersmith_database:/mysql"
    when:
      - "'DATABASE_HOST=db' in web_container_info.container.Config.Env"
    tags:
      - upgrade_only
      - mysql_permissions

  # Retrieve Ubersmith images from the repository and start containers
  # docker compose up -d --quiet-pull --no-color web cron db php solr mail rwhois redis redis-data
  - name: update and start ubersmith containers
    ansible.builtin.command: docker compose up -d --quiet-pull --no-color web cron db php solr mail rsyslog rwhois redis-data
    args:
      chdir: "{{ ubersmith_home }}"
    environment:
      MAINTENANCE: "1"
    tags:
      - upgrade
      - maintenance_enable

  - name: scale redis containers
    # docker compose up -d --scale redis=3 redis
    ansible.builtin.command: docker compose up -d --scale redis=3 redis
    args:
      chdir: "{{ ubersmith_home }}"
    tags:
      - upgrade      

  # Solr can take a little bit to start, so wait before proceeding with the upgrade.
  - name: wait for containers to come online
    # wait_for:
    #   timeout: 15
    community.docker.docker_container_info:
      name: "{{ item }}"
    register: db_docker_container_info
    until: db_docker_container_info.container.State.Health.Status == "healthy"
    retries: 10
    delay: 30
    with_items:
      - ubersmith-web-1
      - ubersmith-php-1
      - ubersmith-solr-1
    when:
      - "'DATABASE_HOST=db' in web_container_info.container.Config.Env"   
    tags:
      - upgrade_only

  # Copy redis data dumped from the redis locking container to the redis data container's volume
  - name: copy dump.rdb if redis volume does not exist
    ansible.builtin.command: docker cp dump.rdb ubersmith-redis-data-1:/data/dump.rdb
    args:
      chdir:  "{{ ubersmith_home }}"
    when: not redis_volume_output.exists
    ignore_errors: true
    tags:
      - upgrade_only

  # Change ownership on the redis dump.rdb file to redis:redis
  - name: give redis user ownership over dump.rdb
    community.docker.docker_container_exec:
      container: ubersmith-redis-data-1
      command: /bin/bash -c "chown redis:redis /data/dump.rdb"
    when: not redis_volume_output.exists
    ignore_errors: true
    tags:
      - upgrade_only

  # Depending on system performance, the database container can take a long time to restart
  - name: check database container status
    community.docker.docker_container_info:
      name: ubersmith-db-1
    register: db_docker_container_info
    until: db_docker_container_info.container.State.Health.Status == "healthy"
    retries: 6
    delay: 10
    when:
      - "'DATABASE_HOST=db' in web_container_info.container.Config.Env"
    tags:
      - docker_container_info
      - upgrade_only
      - mysql_upgrade
 
  # For upgrades, run the updatedb.php script which performs the upgrade process.
  - name: run updatedb.php
    community.docker.docker_container_exec:
      container: ubersmith-php-1
      command: "/bin/bash -c 'php {{ ubersmith_root }}/app/www/setup/updatedb.php ubersmith --debug'"
    register: updatedb_output
    tags:
      - upgrade_only

  # Show the upgrade output, in the event of any issues.
  - name: display updatedb.php debug output
    ansible.builtin.debug: 
      var: "{{ item }}"
    with_items:
      - updatedb_output.stderr
      - updatedb_output.stdout
    tags:
      - upgrade_only

  # For upgrades, remove the setup/ directory, allowing Ubersmith to start.
  - name: remove setup
    community.docker.docker_container_exec:
      container: ubersmith-web-1
      command: "/bin/bash -c 'rm -rf {{ ubersmith_root }}/app/www/setup'"
    tags:
      - upgrade_only

  # Disable maintenance mode
  - name: start web container with maintenance mode disabled
    ansible.builtin.command: docker compose up -d --no-color web
    args:
      chdir: "{{ ubersmith_home }}"
    environment:
      MAINTENANCE: "0"
    tags:
      - upgrade
      - maintenance_disable

  # Back up MySQL keyring
  - name: make a backup of the mysql keyring
    community.docker.docker_container:
      name: busybox
      image: "busybox"
      container_default_behavior: compatibility
      command: "tar cvf /backup/component_keyring_file.{{ ansible_date_time.epoch }}.tar /keyring"
      user: root
      auto_remove: yes
      log_driver: syslog
      log_options:
        tag: ubersmith/busybox
      volumes:
        - "ubersmith_database_keyring:/keyring"
        - "{{ ubersmith_home }}/backup:/backup"
    when:
      - "'DATABASE_HOST=db' in web_container_info.container.Config.Env"
    tags:
      - mysql_config
      - mysql_keyring_backup

  # Store the configuration values specified during the deploy for use during
  # future upgrades.
  - name: set post upgrade values in ini file for future use
    community.general.ini_file:
      dest: "{{ ansible_user_dir }}/.ubersmith_installer.ini"
      section: ubersmith_installer
      option: "{{ item.var }}"
      value: "{{ item.val }}"
      owner: "{{ ansible_user_id }}"
      group: "{{ ansible_user_gid }}"
      mode: "0644"
    with_items:
      - { var: 'ubersmith_installed_version', val: "{{ ubersmith_version }}" }
      - { var: 'lets_encrypt_certificate', val: "{{ lets_encrypt_certificate }}"}
    tags:
      - upgrade

  # Cleanup unused Docker images to preserve disk space.
  - name: docker image cleanup
    community.docker.docker_prune:
      images: true
    tags:
      - upgrade_only