---

  - name: assert that domain names are set
    ansible.builtin.assert:
      that:
        - certificate_domains is defined
      fail_msg: "No domains specified; cannot request certificate"
    tags:
       - certbot_only

  - name: assert that notify email is set
    ansible.builtin.assert:
      that:
        - notify_email is defined
      fail_msg: "No notification email specified; cannot request certificate"
    tags:
       - certbot_only

  - name: install snapd core
    community.general.snap:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
        - core
    tags:
      - certbot_only

  - name: remove certbot installed with pip
    ansible.builtin.pip:
      name: certbot
      state: absent
    tags:
     - certbot_only

  - name: remove certbot installed via apt
    ansible.builtin.apt:
      name: certbot
      state: absent 
      update_cache: yes
    when: ansible_os_family == "Debian"
    tags:
     - certbot_only

  - name: remove certbot installed via yum
    ansible.builtin.yum:
      name: certbot
      state: absent 
      update_cache: yes
    when: ansible_os_family == "RedHat"
    tags:
     - certbot_only

  - name: install certbot via snap
    community.general.snap:
      name: "{{ packages }}"
      state: present
      classic: yes
    vars:
      packages:
        - certbot
    tags:
      - certbot_only

  - name: wait for port 80 to become available
    ansible.builtin.wait_for:
      host: 0.0.0.0
      port: 80
      state: drained

  - name: execute certbot standalone
    ansible.builtin.command:
      argv: 
        - /snap/bin/certbot 
        - certonly 
        - "-n"
        - "-d {{ item }}"
        - --standalone 
        - --agree-tos 
        - "-m {{ notify_email }}"
      creates: "/etc/letsencrypt/live/{{ item }}/cert.pem"
    with_items: "{{ certificate_domains.split(',') }}"
    register: certbot_result
    tags:
      - certbot_only

  - name: wait for port 80 to become available
    ansible.builtin.wait_for:
      host: 0.0.0.0
      port: 80
      state: drained

  - name: let's encrypt renewal cron task
    cron:
      name: "check for le renewal"
      job: "/snap/bin/certbot renew"
      user: root
      special_time: daily