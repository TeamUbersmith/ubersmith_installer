---

  - hosts: local

    vars:
      ubersmith_version: "{{ lookup('ini', 'ubersmith_installed_version section=ubersmith_installer file={{ ansible_user_dir }}/.ubersmith_installer.ini') }}"


    tasks:

      # Query the Github API to get a list of available patches
      - name: retrieve available patch releases
        ansible.builtin.uri:
          url: https://api.github.com/repos/TeamUbersmith/ubersmith-patches/releases
          headers:
            Accept: application/vnd.github.v3+json
        register: all_patches

      # - name: debug ubersmith_version
      #   ansible.builtin.debug:
      #     msg: "{{ ubersmith_version }}"

      - name: determine available patches
        set_fact:
          available_patches: "{{ all_patches.json | to_json | from_json | community.general.json_query(patch_name_query) }}"
        vars:
          patch_name_query: "[?contains(name,'{{ ubersmith_version }}')].[id, name, html_url, assets[].browser_download_url | [0]]"

      # - name: debug available_patches
      #   ansible.builtin.debug:
      #     # available_patches.json[0].assets
      #     # jmespath: 
      #     # [].assets[*].browser_download_url
      #     # [?name=='4.6.2 Test Patch'].name
      #     msg: "{{ available_patches.json | to_json | from_json | community.general.json_query(patch_name_query) }}"
      #   vars:
      #     patch_name_query: "[?contains(name,'4.6.1')].[id, name, html_url, assets[].browser_download_url | [0]]"

      - name: display available patches
        ansible.builtin.debug:
          msg: "{{ patch_message }}"
        vars:
          patch_message: >-
              === Available Patches for Ubersmith {{ ubersmith_version}} ===
              {% for _patch in available_patches %}
              Name: {{ _patch[1] }}
              URL: {{ _patch[2] }}
              ID: {{ _patch[0] }}

              {% endfor %}
