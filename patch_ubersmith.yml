---
# export "OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES"

  - hosts: local

    vars:
      ubersmith_version: "{{ lookup('ini', 'ubersmith_installed_version section=ubersmith_installer file={{ ansible_user_dir }}/.ubersmith_installer.ini') }}"
      all_patches: "{{ lookup('url', 'https://api.github.com/repos/TeamUbersmith/ubersmith-patches/releases', headers={'Accept':'application/vnd.github.v3+json'})}}"
      ubersmith_home: "{{ lookup('ini', 'ubersmith_home section=ubersmith_installer file={{ ansible_user_dir }}/.ubersmith_installer.ini') }}"
      # patch_name_query: "[?contains(name,'{{ ubersmith_version }}')].[id, name, html_url, assets[].browser_download_url | [0]]"
      # available_patches: "{{ all_patches | to_json | from_json | community.general.json_query(patch_name_query) }}"

    # vars_prompt:

    #   - name: "patch_id"
    #     prompt: >-
    #       === Available Patches for Ubersmith {{ ubersmith_version}} ===
    #       {% for _patch in available_patches %}
    #       Name: {{ _patch[1] }}
    #       URL: {{ _patch[2] }}
    #       ID: {{ _patch[0] }}

    #       {% endfor %}
    #     private: no

    tasks:

      # Query the Github API to get a list of available patches
      # - name: retrieve available patch releases
      #   ansible.builtin.uri:
      #     url: https://api.github.com/repos/TeamUbersmith/ubersmith-patches/releases
      #     headers:
      #       Accept: application/vnd.github.v3+json
      #   register: all_patches

      # - name: debug ubersmith_version
      #   ansible.builtin.debug:
      #     msg: "{{ ubersmith_version }}"

      # - name: debug available_patches
      #   ansible.builtin.debug: 
      #     msg: "{{ all_patches }}"

      # Create the directory structure required for Ubersmith to store patches
      - name: create ubersmith configuration directories
        ansible.builtin.file:
          path: "{{ ubersmith_home }}/app/patches"
          state: directory
          owner: "{{ ansible_user_id }}"
          group: "{{ ansible_user_gid }}"
          mode: 0775

      - name: determine available patches
        ansible.builtin.set_fact:
          available_patches: "{{ all_patches | to_json | from_json | community.general.json_query(patch_name_query) }}"
        vars:
          patch_name_query: "[?contains(name,'{{ ubersmith_version }}')].[id, name, html_url, assets[].browser_download_url | [0]]"

      - name: prompt for patch id
        ansible.builtin.pause:
          prompt: |-

              === Available Patches for Ubersmith {{ ubersmith_version}} ===
              {% for _patch in available_patches %}
              Name: {{ _patch[1] }}
              URL: {{ _patch[2] }}
              ID: {{ _patch[0] }}

              {% endfor %}

              Enter the patch ID to apply
        register: patch_id

      - name: debug patch input
        ansible.builtin.debug:
          msg: "{{ patch_id.user_input }}"

      - name: retrieve assets for selected patch
        ansible.builtin.set_fact:
          my_patch: "{{ lookup('url', release_url, headers={'Accept':'application/vnd.github.v3+json'})}}"
        vars:
          release_url: "https://api.github.com/repos/TeamUbersmith/ubersmith-patches/releases/{{ patch_id.user_input }}"

      - name: retrieve selected patch
        ansible.builtin.unarchive:
          src: "{{ my_patch.assets.browser_download_url }}"
          dest: "{{ ubersmith_home }}/app/patches"
          remote_src: yes

      # - name: build prompt
      #   set_fact:
          # patch_message: >-
          #     === Available Patches for Ubersmith {{ ubersmith_version}} ===
          #     {% for _patch in available_patches %}
          #     Name: {{ _patch[1] }}
          #     URL: {{ _patch[2] }}
          #     ID: {{ _patch[0] }}

          #     {% endfor %}

      # - name: debug available_patches
      #   ansible.builtin.debug:
      #     # available_patches.json[0].assets
      #     # jmespath: 
      #     # [].assets[*].browser_download_url
      #     # [?name=='4.6.2 Test Patch'].name
      #     msg: "{{ available_patches.json | to_json | from_json | community.general.json_query(patch_name_query) }}"
      #   vars:
      #     patch_name_query: "[?contains(name,'4.6.1')].[id, name, html_url, assets[].browser_download_url | [0]]"

      # - name: display available patches
      #   ansible.builtin.debug:
      #     msg: "{{ patch_message }}"
      #   vars:
      #     patch_message: >-
      #         === Available Patches for Ubersmith {{ ubersmith_version}} ===
      #         {% for _patch in available_patches %}
      #         Name: {{ _patch[1] }}
      #         URL: {{ _patch[2] }}
      #         ID: {{ _patch[0] }}

      #         {% endfor %}
